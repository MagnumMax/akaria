// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º shadcn/ui
class ContactsHeaderPanel {
    constructor() {
        this.initializeComponents();
        this.bindEvents();
    }

    initializeComponents() {
        this.renderActionButtons();
        this.renderFilterTabs();
        this.renderSearchPanel();
    }

    renderActionButtons() {
        const actionsContainer = document.getElementById('contacts-actions');
        if (!actionsContainer) return;

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—ã—á–Ω—ã—Ö button —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const importButton = document.createElement('button');
        importButton.className = 'px-3 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500';
        importButton.textContent = '–ò–º–ø–æ—Ä—Ç';
        importButton.id = 'import-contacts-btn';

        const messageButton = document.createElement('button');
        messageButton.className = 'px-3 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed';
        messageButton.textContent = '–°–æ–æ–±—â–µ–Ω–∏–µ';
        messageButton.disabled = true;
        messageButton.id = 'bulk-send-message-btn';

        const addButton = document.createElement('button');
        addButton.className = 'px-3 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500';
        addButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
        addButton.id = 'add-contact-btn';

        actionsContainer.appendChild(importButton);
        actionsContainer.appendChild(messageButton);
        actionsContainer.appendChild(addButton);
    }

    renderFilterTabs() {
        const tabsContainer = document.getElementById('contacts-filter-tabs');
        if (!tabsContainer) return;

        const filterOptions = [
            { status: 'all', label: 'All', active: true },
            { status: 'new', label: 'New' },
            { status: 'contacted', label: 'Contacted' },
            { status: 'qualified', label: 'Qualified' },
            { status: 'deal-in-progress', label: 'Deal in progress' },
            { status: 'rejected', label: 'Rejected' }
        ];

        filterOptions.forEach(option => {
            const badge = Badge.create({
                variant: option.active ? 'default' : 'secondary',
                size: 'sm',
                className: `cursor-pointer transition-colors hover:opacity-80 ${
                    option.active ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`,
                children: option.label
            });

            badge.classList.add('contact-filter-tab');
            badge.dataset.status = option.status;

            tabsContainer.appendChild(badge);
        });
    }

    renderSearchPanel() {
        const searchContainer = document.getElementById('contacts-search-panel');
        if (!searchContainer) return;

        // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = Input.create({
            type: 'text',
            placeholder: '–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...',
            className: 'w-full sm:w-64'
        });
        searchInput.id = 'contacts-search';

        // –°–µ–ª–µ–∫—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const sourceSelect = Select.create({
            options: [
                { value: 'all', label: '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏' },
                { value: 'website', label: '–°–∞–π—Ç' },
                { value: 'referral', label: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è' },
                { value: 'social', label: '–°–æ—Ü. —Å–µ—Ç–∏' },
                { value: 'advertising', label: '–†–µ–∫–ª–∞–º–∞' },
                { value: 'cold-call', label: '–•–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫' }
            ],
            defaultValue: 'all'
        });
        sourceSelect.id = 'source-filter';

        searchContainer.appendChild(searchInput);
        searchContainer.appendChild(sourceSelect);
    }

    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∞–±–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('contact-filter-tab')) {
                this.handleFilterTabClick(e.target);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        document.addEventListener('click', (e) => {
            if (e.target.id === 'import-contacts-btn') {
                document.getElementById('import-file-input').click();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('contacts-search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearch(e.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const sourceFilter = document.getElementById('source-filter');
        if (sourceFilter) {
            sourceFilter.addEventListener('change', (e) => {
                this.handleSourceFilter(e.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        document.addEventListener('contacts-selection-changed', (e) => {
            this.updateMessageButtonState(e.detail.count);
        });
    }

    handleFilterTabClick(clickedTab) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        document.querySelectorAll('.contact-filter-tab').forEach(tab => {
            tab.className = tab.className.replace(
                'bg-blue-500 text-white',
                'bg-gray-100 text-gray-700 hover:bg-gray-200'
            );
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞–±—É
        clickedTab.className = clickedTab.className.replace(
            'bg-gray-100 text-gray-700 hover:bg-gray-200',
            'bg-blue-500 text-white'
        );

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        const status = clickedTab.dataset.status;
        this.filterContacts(status);
    }

    handleSearch(query) {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if (window.contactsManager) {
            window.contactsManager.searchContacts(query);
        }
    }

    handleSourceFilter(source) {
        // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        if (window.contactsManager) {
            window.contactsManager.filterBySource(source);
        }
    }

    filterContacts(status) {
        // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (window.contactsManager) {
            window.contactsManager.filterByStatus(status);
        }
    }

    updateMessageButtonState(selectedCount) {
        const messageButton = document.getElementById('bulk-send-message-btn');
        if (messageButton) {
            messageButton.disabled = selectedCount === 0;
            messageButton.textContent = selectedCount > 0
                ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ (${selectedCount})`
                : 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ';
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ContactsHeaderPanel;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
window.ContactsHeaderPanel = ContactsHeaderPanel;